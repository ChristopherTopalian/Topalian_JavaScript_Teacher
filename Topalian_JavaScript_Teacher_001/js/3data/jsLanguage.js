// Dedicated to God the Father

// All Rights Reserved Christopher Andrew Topalian Copyright 2000-2024

// https://github.com/ChristopherTopalian

// https://github.com/ChristopherAndrewTopalian

// jsLanguage.js

let jsLanguage = [
"array.at(index)",
"array1.concat(array2, array3);",
"array.copyWithin(target, start, end);",
"array.entries()",
"array.every(function(currentValue, index, arr), thisValue)",
"array.fill(value, start, end)",
"array.filter(function(currentValue, index, arr), thisValue)",
"array.find(function(currentValue, index, arr),thisValue)",
"array.findIndex(function(currentValue, index, arr), thisValue)",
"array.flat(depth)",
"array.flatMap(function(currentValue, index, arr), thisValue)",
"array.forEach(function(currentValue, index, arr), thisValue)",
"array.from(object, mapFunction, thisValue)",
"array.includes(element, start)",
"array.indexOf(item, start)",
"array.isArray(obj)",
"array.join(separator)",
"array.keys()",
"array.length and  array.length = number",
"array.lastIndexOf(item, start)",
"array.map(function(currentValue, index, arr), thisValue)",
"array.pop()",
"array.prototype.name = value",
"array.push(item1, item2, ..., itemX)",
"array.reduce(function(total, currentValue, currentIndex, arr), initialValue)",
"array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)",
"array.reverse()",
"array.shift()",
"array.slice(start, end)",
"array.some(function(currentValue, index, arr), thisValue)",
"array.sort(compareFunction)",
"array.splice(index, howmany, item1, ....., itemX)",
"array.toString()",
"array.unshift(item1, item2, ..., itemX)",
"array.valueOf()",

"Math.abs(x)",
"Math.acos(x)",
"Math.acosh(x)",
"Math.asin(x)",
"Math.asinh(x)",
"Math.atan(x)",
"Math.atan2(y, x)",
"Math.atanh(x)",
"Math.cbrt(x)",
"Math.ceil(x)",
"Math.clz32(x)",
"Math.cos(x)",
"Math.cosh(x)",
"Math.E",
"Math.exp(x)",
"Math.expm1(x)",
"Math.floor(x)",
"Math.fround(x)",
"Math.LN2",
"Math.LN10",
"Math.log(x)",
"Math.log10(x)",
"Math.log1p(x)",
"Math.LOG2E",
"Math.LOG10E",
"Math.max(n1, n2,…)",
"Math.min(n1, n2,…)",
"Math.PI",
"Math.pow(x, y)",
"Math.random()",
"Math.round(x)",
"Math.sign(x)",
"Math.sin(x)",
"Math.sinh(x)",
"Math.sqrt(x)",
"Math.SQRT1_2",
"Math.SQRT2",
"Math.tan(x)",
"Math.tanh(x)",
"Math.trunc(x)",

"boolean.constructor",
"boolean.prototype.name = value ",
"boolean.toString()",
"boolean.valueOf()",

"Date.constructor",
"Date.getDate()",
"Date.getDay()",
"Date.getFullYear()",
"Date.getHours()",
"Date.getMilliseconds()",
"Date.getMinutes()",
"Date.getMonth()",
"Date.getSeconds()",
"Date.getTime()",
"Date.getTimezoneOffset()",
"Date.getUTCDate()",
"Date.getUTCDay()",
"Date.getUTCFullYear()",
"Date.getUTCHours()",
"Date.getUTCMilliseconds()",
"Date.getUTCMinutes()",
"Date.getUTCMonth()",
"Date.getUTCSeconds()",
"Date.now()",
"Date.parse(datestring)",
"Date.prototype.name = value",
"Date.setDate(day)",
"Date.setFullYear(year, month, day)",
"Date.setHours(hour, min, sec, millisec)",
"Date.setMilliseconds(millisec)",
"Date.setMinutes(min, sec, millisec)",
"Date.setMonth(month, day)",
"Date.setSeconds(sec, millisec)",
"Date.setTime(millisec)",
"Date.setUTCDate(day)",
"Date.setUTCFullYear(year, month, day)",
"Date.setUTCHours(hour, min, sec, millisec)",
"Date.setUTCMilliseconds(millisec)",
"Date.setUTCMinutes(min, sec, millisec)",
"Date.setUTCMonth(month, day)",
"Date.setUTCSeconds(sec, millisec)",
"Date.toDateString()",
"Date.toISOString()",
"Date.toJSON()",
"Date.toLocaleDateString()",
"Date.toLocaleTimeString()",
"Date.toLocaleString(locales, options)",
"Date.toString()",
"Date.toTimeString()",
"Date.toUTCString()",
"Date.UTC(year, month, day, hours, minutes, seconds, millisec)",
"Date.valueOf()",

"string.charAt(index)",
"string.at(index)",
"string.charAt(index)",
"string.charCodeAt(index)",
"string.codePointAt(index)",
"string.concat(string1, string2, ..., stringX)",
"string.constructor",
"string.endsWith(searchvalue, length)",
"String.fromCharCode(n1, n2, ..., nX)",
"string.includes(searchvalue, start)",
"string.indexOf(searchvalue, start)",
"string.lastIndexOf(searchvalue, start)",
"string.length",
"string.localeCompare(compareString)",
"string.match(match)",
"string.padEnd(length, string)",
"string.padStart(length, string)",
"object.prototype.name = value",
"string.repeat(count)",
"string.replace(searchValue, newValue)",
"string.replaceAll(searchValue, newValue)",
"string.search(searchValue)",
"string.slice(start, end)",
"string.split(separator, limit)",
"string.startsWith(searchValue, start)",
"string.substr(start, length)",
"string.substring(start, end)",
"string.toLocaleLowerCase()",
"string.toLocaleUpperCase()",
"string.toLowerCase()",
"string.toString()",
"string.toUpperCase()",
"string.trim()",
"string.trimEnd()",
"string.valueOf()",

"decodeURI(uri)",
"decodeURIComponent(uri)",
"encodeURI(uri)",
"encodeURIComponent(uri)",
"eval(string)",
"Infinity",
"isFinite(value)",
"isNaN(value)",
"NaN",
"Number(value)",
"parseFloat(value)",
"parseInt(string, radix)",
"String(value)",
"number.constructor",
"Number.EPSILON",
"Number.isFinite(value)",
"Number.isSafeInteger(value)",
"Number.isInteger(value)",
"Number.isNaN(value)",
"Number.isSafeInteger(value)",
"let x = Number.MAX_SAFE_INTEGER; ",
"Number.MIN_SAFE_INTEGER",
"Number.MAX_VALUE",
"Number.MIN_VALUE",
"Number.NEGATIVE_INFINITY",
"Number.NaN",
"Number.POSITIVE_INFINITY",
"Number.parseFloat(value)",
"Number.parseInt(string, radix)",
"Number.prototype.name = value",
"number.toExponential(x)",
"number.toFixed(x)",
"number.toLocaleString(locales, options)",
"number.toPrecision(x)",
"number.toString(radix)",
"number.valueOf()",
"RegExpObject.constructor",
"RegExpObject.exec(string)",
"/regexp/g",
"RegExpObject.global",
"/regexp/i",
"RegExpObject.ignoreCase",
"RegExpObject.lastIndex",
"/regexp/m",
"RegExpObject.multiline",
"/n+/g",
"/n*/g",
"/n?/g",
"/n{X}/g",
"/n{X,Y}/g",
"/n{X,}/g",
"/n$/g",
"/^n/ /\\^n/g",
"/regexp(?=n)/g",
"/regexp(?!n)/g",
"RegExpObject.source",
"RegExpObject.test(string)",
"RegExpObject.toString()",
"/[abc]/g",
"/[^xyz]/g",
"/[0-9]/g", 
"/[^0-9]/g",
"/(x|y)/g",
"/regexp./g",
"/\\w/g",
"/\\W/g",
"/\\d/g",
"/\\D/g",
"/\\s/g",
"/\\S/g",
"/\\bregexp/g",
"/\\bregexp/g",
"/\\0/",
"/\\n/",
"/\\f/",
"/\\r/",
"/\\t/",
"/\\v/",
"/\\xxx/g",
"/\\xdd/g",
"/\\udddd/g",

"constructor(parameters)",
"class subClass extends mainClass",
"static methodName()",
"super(arguments);",
"super.parentMethod(arguments);",

"errorObj.name",
"errorObj.message",

"JSON.parse(string, function)",
"JSON.stringify(obj, replacer, space)",

"console.assert(expression, message)",
"console.clear()",
"console.count(label)",
"console.error(message)",
"console.group(label)",
"console.groupCollapsed(label)",
"console.groupEnd()",
"console.info(message)",
"console.log(message)",
"console.table(tabledata, tablecolumns)",
"console.time(label)",
"console.timeEnd(label)",
"console.trace(label)",
"console.warn(message)",

"history.back()",
"history.forward()",
"history.go(number)",
"history.length",

"localStorage.key(index)",
"sessionStorage.key(index)",
"localStorage.length",
"sessionStorage.length",
"localStorage.getItem(keyname)",
"sessionStorage.getItem(keyname)",
"localStorage.setItem(keyname, value)",
"sessionStorage.setItem(keyname, value)",
"localStorage.removeItem(keyname)",
"sessionStorage.removeItem(keyname)",
"localStorage.clear()",
"sessionStorage.clear()",

"getCurrentPosition(success)",
"getCurrentPosition(success, error)",
"getCurrentPosition(success, error, options)"
];

